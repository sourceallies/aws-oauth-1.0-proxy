{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Parameters": {
    "HostedZone" : {
      "Type" : "String"
    },
    "DomainName": {
      "Type" : "String"
    },
    "StackName": {
      "Type" : "String"
    },
    "ClientKey" : {
      "Type" : "String"
    },
    "ClientSecret" : {
      "Type" : "String"
    },
    "BucketName" : {
      "Type" : "String"
    },
    "ApiUrl": {
      "Type": "String"
    },
    "OAuthCustomHeaders": {
      "Type": "String"
    },
    "AuthorizeCallbackUri": {
      "Type": "String"
    },
    "CloudFrontDomain": {
        "Type": "String"
    }
  },
  "Resources" : {
    "OAuthFirstLegLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": {
          "Bucket" : {
            "Ref" : "BucketName"
          },
          "Key": "artifact.zip"
        },
        "Description": "OAuth First Leg Lambda Function",
        "FunctionName": "oauth-first-leg",
        "Handler": "index.firstLegHandler",
        "Role": {
          "Fn::Sub" : "arn:aws:iam::${AWS::AccountId}:role/basic-lambda-execution-role"
        },
        "Policies": [ "AWSLambdaFullAccess" ],
        "Runtime": "nodejs8.10",
        "Timeout": 30,
        "MemorySize": 256,
        "Events": {
          "PostResource":{
            "Type" : "Api",
            "Properties" : {
              "Path" : "/firstLegAuth",
              "Method" : "post"
            }
          }
        },
        "Environment" : {
          "Variables" : {
            "CLIENT_KEY" : {
              "Ref" : "ClientKey"
            },
            "CLIENT_SECRET" : {
              "Ref" : "ClientSecret"
            },
            "API_URL": {
              "Ref": "ApiUrl"
            },
            "OAUTH_CUSTOM_HEADERS": {
              "Ref": "OAuthCustomHeaders"
            },
            "AUTHORIZE_CALLBACK_URI": {
              "Ref": "AuthorizeCallbackUri"
            }
          }
        }
      }
    },
    "OAuthThirdLegLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": {
          "Bucket" : {
            "Ref" : "BucketName"
          },
          "Key": "artifact.zip"
        },
        "Description": "OAuth Third Leg Lambda Function",
        "FunctionName": "oauth-third-leg",
        "Handler": "index.thirdLegHandler",
        "Role": {
          "Fn::Sub" : "arn:aws:iam::${AWS::AccountId}:role/basic-lambda-execution-role"
        },
        "Policies": [ "AWSLambdaFullAccess" ],
        "Runtime": "nodejs8.10",
        "Timeout": 30,
        "MemorySize": 256,
        "Events": {
          "PostResource":{
            "Type" : "Api",
            "Properties" : {
              "Path" : "/thirdLegAuth",
              "Method" : "post"
            }
          }
        },
        "Environment" : {
          "Variables" : {
            "CLIENT_KEY" : {
              "Ref" : "ClientKey"
            },
            "CLIENT_SECRET" : {
              "Ref" : "ClientSecret"
            },
            "API_URL": {
              "Ref": "ApiUrl"
            },
            "OAUTH_CUSTOM_HEADERS": {
              "Ref": "OAuthCustomHeaders"
            },
            "AUTHORIZE_CALLBACK_URI": {
              "Ref": "AuthorizeCallbackUri"
            }
          }
        }
      }
    },
    "OAuthSignRequestPostLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": {
          "Bucket" : {
            "Ref" : "BucketName"
          },
          "Key": "artifact.zip"
        },
        "Description": "OAuth Sign Request Post Lambda Function",
        "FunctionName": "oauth-sign-request-post",
        "Handler": "index.oAuthSignRequestPost",
        "Role": {
          "Fn::Sub" : "arn:aws:iam::${AWS::AccountId}:role/basic-lambda-execution-role"
        },
        "Policies": [ "AWSLambdaFullAccess" ],
        "Runtime": "nodejs8.10",
        "Timeout": 30,
        "MemorySize": 256,
        "Events": {
          "PostResource":{
            "Type" : "Api",
            "Properties" : {
              "Path" : "/oAuthSignRequest",
              "Method" : "post"
            }
          }
        },
        "Environment" : {
          "Variables" : {
            "CLIENT_KEY" : {
              "Ref" : "ClientKey"
            },
            "CLIENT_SECRET" : {
              "Ref" : "ClientSecret"
            },
            "OAUTH_CUSTOM_HEADERS": {
              "Ref": "OAuthCustomHeaders"
            },
            "AUTHORIZE_CALLBACK_URI": {
              "Ref": "AuthorizeCallbackUri"
            }
          }
        }
      }
    },
    "OAuthSignRequestGetLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": {
          "Bucket" : {
            "Ref" : "BucketName"
          },
          "Key": "artifact.zip"
        },
        "Description": "OAuth Sign Request Get Lambda Function",
        "FunctionName": "oauth-sign-request-get",
        "Handler": "index.oAuthSignRequestGet",
        "Role": {
          "Fn::Sub" : "arn:aws:iam::${AWS::AccountId}:role/basic-lambda-execution-role"
        },
        "Policies": [ "AWSLambdaFullAccess" ],
        "Runtime": "nodejs8.10",
        "Timeout": 30,
        "MemorySize": 256,
        "Events": {
          "GetResource":{
            "Type" : "Api",
            "Properties" : {
              "Path" : "/oAuthSignRequest",
              "Method" : "get"
            }
          }
        },
        "Environment" : {
          "Variables" : {
            "CLIENT_KEY" : {
              "Ref" : "ClientKey"
            },
            "CLIENT_SECRET" : {
              "Ref" : "ClientSecret"
            },
            "OAUTH_CUSTOM_HEADERS": {
              "Ref": "OAuthCustomHeaders"
            },
            "AUTHORIZE_CALLBACK_URI": {
              "Ref": "AuthorizeCallbackUri"
            }
          }
        }
      }
    },
    "DomainNameARecord": {
       "Type": "AWS::Route53::RecordSetGroup",
       "Properties": {
          "Comment": "Points to an API Gateway Custom Domain a.k.a. CloudFront Distribution",
          "HostedZoneId": {"Ref" : "HostedZone"},
          "RecordSets": [
             {
                "Name": { "Ref" : "ApiUrl" },
                "Type": "A",
                "AliasTarget": {
                   "HostedZoneId": "Z2FDTNDATAQYW2",
                   "DNSName": {"Ref": "CloudFrontDomain"}
                }
             }
          ]
       }
    },
    "AppBasePathMapping": {
       "Type": "AWS::ApiGateway::BasePathMapping",
       "Properties": {
          "BasePath": "app",
          "DomainName": {"Ref" : "DomainName"},
          "RestApiId": {
             "Fn::ImportValue": {
                "Fn::Join": [
                   "",
                   [
                      {"Ref": "StackName"},
                      "ApiId"
                   ]
                ]
             }
          },
          "Stage": "Prod"
       }
    },
    "OAuthSignRequestDeleteLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": {
          "Bucket" : {
            "Ref" : "BucketName"
          },
          "Key": "artifact.zip"
        },
        "Description": "OAuth Sign Request Delete Lambda Function",
        "FunctionName": "oauth-sign-request-delete",
        "Handler": "index.oAuthSignRequestDelete",
        "Role": {
          "Fn::Sub" : "arn:aws:iam::${AWS::AccountId}:role/basic-lambda-execution-role"
        },
        "Policies": [ "AWSLambdaFullAccess" ],
        "Runtime": "nodejs8.10",
        "Timeout": 30,
        "MemorySize": 256,
        "Events": {
          "DeleteResource":{
            "Type" : "Api",
            "Properties" : {
              "Path" : "/oAuthSignRequest",
              "Method" : "delete"
            }
          }
        },
        "Environment" : {
          "Variables" : {
            "CLIENT_KEY" : {
              "Ref" : "ClientKey"
            },
            "CLIENT_SECRET" : {
              "Ref" : "ClientSecret"
            },
            "OAUTH_CUSTOM_HEADERS": {
              "Ref": "OAuthCustomHeaders"
            },
            "AUTHORIZE_CALLBACK_URI": {
              "Ref": "AuthorizeCallbackUri"
            }
          }
        }
      }
    }
  },
  "Outputs" : {
    "ApiURL" : {
      "Description" : "API endpoint for the lambdas",
      "Value" : {
        "Fn::Sub" : "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
      }
    }
  }
}
